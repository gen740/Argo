module;

export module Argo;
import std_module;

// template <std::string arg, class T>
// class Tag {
//
// };

export namespace Argo {

/*!
 * InvalidArgument exception class
 */
class InvalidArgument : public std::invalid_argument {
 public:
  explicit InvalidArgument(const std::string& msg)
      : std::invalid_argument(msg) {}

  [[nodiscard]] const char* what() const noexcept override {
    return std::invalid_argument::what();
  }
};

/*!
 * Arg type this holds argument value
 */
template <auto Name, class Type>
struct Arg {
  static constexpr auto name = Name;
  using type = Type;
  inline static type value = {};
};

template <auto T, auto U>
struct StringCmp {
  static consteval auto eval() {
    if (T.size() != U.size()) {
      return false;
    }
    for (int i = 0; i < T.size(); i++) {
      if (T[i] != U[i]) {
        return false;
      }
    }
    return true;
  }
};

template <std::size_t N>
auto cmpCharArr(const std::array<char, N>(&a), const char* b) {
  auto b_size = std::strlen(b);
  if ((N - 1) != b_size) {
    return false;
  }
  for (std::size_t i = 0; i < b_size; i++) {
    if (a[i] != b[i]) {
      return false;
    }
  }
  return true;
}

/*!
 * Index Search meta function
 */
template <typename Tuple, auto T, int Index = 0>
struct SearchIndex;

template <auto T, std::size_t Index>
struct SearchIndex<std::tuple<>, T, Index> {
  static constexpr int value = -1;
};

template <auto T, std::size_t Index, typename Head, typename... Tails>
struct SearchIndex<std::tuple<Head, Tails...>, T, Index> {
  static constexpr bool matched = StringCmp<Head::name, T>::eval();
  static constexpr int value =
      matched ? Index : SearchIndex<std::tuple<Tails...>, T, Index + 1>::value;
};

/*!
 * convert const char[] to std::array<char, N>
 */
template <std::size_t N>
consteval auto arg(const char (&a)[N]) {
  std::array<char, N> arr{};
  for (std::size_t i = 0; i < N; ++i) {
    arr[i] = a[i];
  }
  return arr;
}

template <class Args>
class Parser {
 public:
  using Arguments = Args;
  Args value;

  template <class Type, auto Name>
  consteval auto addArg() {
    return Parser<decltype(std::tuple_cat(           //
        std::declval<Arguments>(),                   //
        std::declval<std::tuple<Arg<Name, Type>>>()  //
        ))>();
  }

  template <auto Name>
  auto getArg() {
    using P = std::remove_cvref_t<
        decltype(std::get<SearchIndex<Arguments, Name>::value>(this->value))>;
    return P::value;
  }

  struct Assigner {
    template <int Index, typename Head, typename... Tails>
    struct AssignImpl {};

    template <int Index>
    struct AssignImpl<Index, std::tuple<>> {
      template <typename Lhs>
      static constexpr auto eval([[maybe_unused]] const char* key,
                                 [[maybe_unused]] const char* val) {
        throw Argo::InvalidArgument(std::format("Invalid argument {}", key));
      }
    };

    template <int Index, typename Head, typename... Tails>
    struct AssignImpl<Index, std::tuple<Head, Tails...>> {
      template <typename Lhs>
      static constexpr auto eval(const char* key, const char* value) {
        using current =
            std::remove_cvref_t<decltype(std::get<Index>(std::declval<Lhs>()))>;
        if (cmpCharArr(current::name, key)) {
          if constexpr (std::is_same_v<typename current::type, int>) {
            current::value = std::stoi(value);
          } else {
            current::value = static_cast<current::type>(value);
          }
          return;
        }
        AssignImpl<1 + Index, std::tuple<Tails...>>::template eval<Lhs>(key,
                                                                        value);
      }
    };

    template <typename Lhs>
    static auto assign(const char* key, const char* val) {
      AssignImpl<0, Lhs>::template eval<Lhs>(key, val);
    };
  };

  auto setArg(const char* key, const char* val) {
    Assigner::template assign<Arguments>(key, val);
  }

  enum class ArgumentParseState { ExpectValue, ExpectArg };

  auto parse([[maybe_unused]] int argc, [[maybe_unused]] char* argv[]) -> void {
    auto parseState = ArgumentParseState::ExpectArg;
    const char* argBuffer;
    for (int i = 1; i < argc; i++) {
      switch (parseState) {
        case ArgumentParseState::ExpectArg: {
          auto argValue = std::string(argv[i]);
          if (argValue.find("--") == 0) {
            argBuffer = argValue.substr(2, argValue.size()).c_str();
          }
          parseState = ArgumentParseState::ExpectValue;
        } break;
        case ArgumentParseState::ExpectValue:
          this->setArg(argBuffer, argv[i]);
          parseState = ArgumentParseState::ExpectArg;
          break;
      }
    }
  }
};

class Argo {
 public:
  template <class Type, auto Name>
  consteval auto addArg() {
    return Parser<std::tuple<Arg<Name, Type>>>();
  }
};

}  // namespace Argo

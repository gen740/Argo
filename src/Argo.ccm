module;

export module Argo;
import std_module;

namespace Argo {

/*!
 * InvalidArgument exception class
 */
export class InvalidArgument : public std::invalid_argument {
 public:
  explicit InvalidArgument(const std::string& msg) : std::invalid_argument(msg) {}

  [[nodiscard]] const char* what() const noexcept override {
    return std::invalid_argument::what();
  }
};

export class ParseError : public std::runtime_error {
 public:
  explicit ParseError(const std::string& msg) : std::runtime_error(msg) {}

  [[nodiscard]] const char* what() const noexcept override {
    return std::runtime_error::what();
  }
};

/*!
 * Arg type this holds argument value
 */
template <auto Name, class Type>
struct Arg {
  static constexpr auto name = Name;
  using type = Type;
  inline static type value = {};
};

template <auto T, auto U>
struct ConstexprStringCmp {
  static consteval auto eval() {
    if (T.size() != U.size()) {
      return false;
    }
    for (int i = 0; i < T.size(); i++) {
      if (T[i] != U[i]) {
        return false;
      }
    }
    return true;
  }
};

/*!
 * Index Search meta function
 */
template <typename Tuple, auto T, int Index = 0>
struct SearchIndex;

template <auto T, std::size_t Index>
struct SearchIndex<std::tuple<>, T, Index> {
  static constexpr int value = -1;
};

template <auto T, std::size_t Index, typename Head, typename... Tails>
struct SearchIndex<std::tuple<Head, Tails...>, T, Index> {
  static constexpr int value = ConstexprStringCmp<Head::name, T>::eval()
                                   ? Index
                                   : SearchIndex<std::tuple<Tails...>, T, Index + 1>::value;
};

/*!
 * convert const char[] to std::array<char, N>
 */
export template <std::size_t N>
consteval auto arg(const char (&a)[N]) {
  std::array<char, N - 1> arr{};
  for (std::size_t i = 0; i < N - 1; ++i) {
    arr[i] = a[i];
  }
  return arr;
}

/*!
 * Helper class of assigning value
 */
struct Assigner {
  template <int Index, typename Head, typename... Tails>
  struct AssignImpl {};

  template <int Index>
  struct AssignImpl<Index, std::tuple<>> {
    template <typename Lhs>
    static auto eval(std::string_view key, [[maybe_unused]] std::string_view val) {
      throw Argo::InvalidArgument(std::format("Invalid argument {}", key));
    }
  };

  template <int Index, typename Head, typename... Tails>
  struct AssignImpl<Index, std::tuple<Head, Tails...>> {
    template <typename Lhs>
    static auto eval(std::string_view key, std::string_view value) {
      using current = std::remove_cvref_t<decltype(std::get<Index>(std::declval<Lhs>()))>;
      if (std::string_view(std::begin(current::name), std::end(current::name)) == key) {
        if constexpr (std::is_same_v<typename current::type, bool>) {
          if ((value == "true") || (value == "1")) {
            current::value = true;
          } else {
            current::value = false;
          }
        } else if constexpr (std::is_integral_v<typename current::type>) {
          std::from_chars(std::begin(value), std::end(value), current::value);
        } else if constexpr (std::is_floating_point_v<typename current::type>) {
          current::value = static_cast<current::type>(std::stod(std::string(value)));
        } else if constexpr (std::is_same_v<typename current::type, const char*>) {
          current::value = value.data();
        } else {
          current::value = static_cast<current::type>(value);
        }
        return;
      }
      AssignImpl<1 + Index, std::tuple<Tails...>>::template eval<Lhs>(key, value);
    }
  };

  template <typename Lhs>
  static auto assign(std::string_view key, std::string_view val) {
    AssignImpl<0, Lhs>::template eval<Lhs>(key, val);
  };
};

template <class CheckType>
struct TypeChecker {
  template <int Index, typename Head, typename... Tails>
  struct TypeCheckerImpl {};

  template <int Index>
  struct TypeCheckerImpl<Index, std::tuple<>> {
    template <typename Lhs>
    [[noreturn]] static auto eval(std::string_view key) -> bool {
      throw Argo::InvalidArgument(std::format("Invalid argument {}", key));
    }
  };

  template <int Index, typename Head, typename... Tails>
  struct TypeCheckerImpl<Index, std::tuple<Head, Tails...>> {
    template <typename Lhs>
    static auto eval(std::string_view key) -> bool {
      using current = std::remove_cvref_t<decltype(std::get<Index>(std::declval<Lhs>()))>;
      if (std::string_view(std::begin(current::name), std::end(current::name)) == key) {
        return std::is_same_v<typename current::type, CheckType>;
      }
      return TypeCheckerImpl<1 + Index, std::tuple<Tails...>>::template eval<Lhs>(key);
    }
  };

  template <typename Lhs>
  static auto check(std::string_view key) -> bool {
    return TypeCheckerImpl<0, Lhs>::template eval<Lhs>(key);
  };
};

export template <class Args = std::tuple<>>
class Parser {
 private:
  bool parsed_ = false;

 public:
  using Arguments = Args;
  Args value;

  template <class Type, auto Name>
  auto addArg(Type default_value = {}) {
    Arg<Name, Type>::value = default_value;
    return Parser<decltype(std::tuple_cat(           //
        std::declval<Arguments>(),                   //
        std::declval<std::tuple<Arg<Name, Type>>>()  //
        ))>();
  }

  template <auto Name>
  auto getArg() {
    if (!this->parsed_) {
      throw ParseError("Parser did not parse argument, call parse first");
    }
    using P =
        std::remove_cvref_t<decltype(std::get<SearchIndex<Arguments, Name>::value>(this->value))>;
    return P::value;
  }

 private:
  /*!
   * Setting the argument value
   */
  auto setArg(std::string_view key, std::string_view val) {
    Assigner::assign<Arguments>(key, val);
  }

 public:
  /*!
   * Parse State
   */
  enum class ArgumentParseState {
    ExpectValue,
    ExpectArg,
    ParsedBoolFlag,
  };

  /*!
   * Parse function
   */
  auto parse([[maybe_unused]] int argc, [[maybe_unused]] char* argv[]) -> void {
    auto parseState = ArgumentParseState::ExpectArg;
    std::string_view argBuffer;
    for (int i = 1; i < argc; i++) {
      auto argValue = std::string_view(argv[i]);
      switch (parseState) {
        case ArgumentParseState::ParsedBoolFlag:
          if (argValue.contains("--")) {
            parseState = ArgumentParseState::ExpectArg;
            this->setArg(argBuffer, "true");
          } else {
            goto caseExpectValue;
          }
        case ArgumentParseState::ExpectArg:
          if (argValue.contains("--") && argValue.find("--") == 0) {
            if (argValue.contains("=")) {
              auto find_pos = argValue.find('=');
              this->setArg(argValue.substr(2, find_pos - 2), argValue.substr(find_pos + 1));
              break;
            }
            argBuffer = argValue.substr(2);

            if (TypeChecker<bool>::check<Arguments>(argBuffer)) {
              parseState = ArgumentParseState::ParsedBoolFlag;
              break;
            }

          } else {
            throw Argo::InvalidArgument("Expect flag");
          }
          parseState = ArgumentParseState::ExpectValue;
          break;
        caseExpectValue:
        case ArgumentParseState::ExpectValue:
          this->setArg(argBuffer, argValue);
          parseState = ArgumentParseState::ExpectArg;
          break;
      }
    }
    this->parsed_ = true;
  }
};

}  // namespace Argo
